#<ELN_LANGFILE_V1_1>

# ./src/main/java/mods/eln/Achievements.java
Electrical_Age_[WIP]=전자 시대 [개발중]
achievement.craft_50v_macerator=초보자 파쇄
achievement.craft_50v_macerator.desc=50V 분쇄기를 조합하세요.
achievement.open_guide=위키 전력
achievement.open_guide.desc=위키 가이드를 여세요

# ./src/main/java/mods/eln/Eln.java
10A_Diode.name=10A 다이오드
200V_Active_Thermal_Dissipator.name=200V 능동 열 발산기
200V_Battery_Charger.name=200V 배터리 충전기
200V_Compressor.name=200V 압축기
200V_Condensator.name=200V 캐퍼시터
200V_Copper_Heating_Corp.name=200V 구리 열선
200V_Economic_Light_Bulb.name=200V 친환경 전구
200V_Emergency_Lamp.name=200V 비상 램프
200V_Farming_Lamp.name=200V 농사용 램프 
200V_Fuel_Generator.name=200V 연료 발전기
200V_Incandescent_Light_Bulb.name=200V 백열등
200V_Iron_Heating_Corp.name=200V 철제 열선
200V_LED_Bulb.name=200V LED 전구
200V_Macerator.name=200V 분쇄기
200V_Magnetizer.name=200V 자화기
200V_Plate_Machine.name=200V 판 기계
200V_Power_Socket.name=200V 전원 소켓
200V_Tungsten_Heating_Corp.name=200V 텅스텐 열선
200V_Turbine.name=200V 터빈
25A_Diode.name=25A 다이오드
2x3_Rotating_Solar_Panel.name=2x3 회전 태양 전지판
2x3_Solar_Panel.name=2x3 태양광 패널
50V_Battery_Charger.name=50V 배터리 충전기
50V_Carbon_Incandescent_Light_Bulb.name=50V 탄소 백열등
50V_Compressor.name=50V 압축기
50V_Condensator.name=50V 캐퍼시터
50V_Copper_Heating_Corp.name=50V 구리 열선
50V_Economic_Light_Bulb.name=50V 친환경 전구
50V_Egg_Incubator.name=50V 계란 부화기
50V_Emergency_Lamp.name=50V 비상 램프
50V_Farming_Lamp.name=50V 농사용 전구
50V_Fuel_Generator.name=50V 연료 발전기
50V_Incandescent_Light_Bulb.name=50V 백열등
50V_Iron_Heating_Corp.name=50V 철제 열선
50V_LED_Bulb.name=50V LED 전구
50V_Macerator.name=50V 분쇄기
50V_Magnetizer.name=50V 자화기
50V_Plate_Machine.name=50V 판 기계
50V_Power_Socket.name=50V 전원 소켓
50V_Tungsten_Heating_Corp.name=50V 텅스텐 열선
50V_Turbine.name=50V 터빈
800V_Defence_Turret.name=800V 방어 터렛
AND_Chip.name=AND 칩
Advanced_Chip.name=고급 회로
Advanced_Electrical_Motor.name=고급 전기 모터
Advanced_Energy_Meter.name=고급 에너지 측정기
Advanced_Machine_Block.name=고급 기계 블록
Advanced_Magnet.name=고급 자석
AllMeter.name=만능 측정기
Alloy_Dust.name=합금 가루
Alloy_Ingot.name=합금 덩어리
Alloy_Plate.name=합금판
Amplifier.name=증폭기
Analog_Watch.name=아날로그 시계
Analog_vuMeter.name=아날로그 계측기
Analogic_Regulator.name=아날로그 조절기
Animal_Filter.name=동물 필터
Auto_Miner.name=자동 채굴기
Average_Electrical_Drill.name=일반 전기 드릴
Average_Ferromagnetic_Core.name=일반 강자성체 핵
Basic_Magnet.name=기초 자석
Big_Fuel_Burner.name=큰 연료 버너
Black_Brush.name=검은색 솔
Blown_Lead_Fuse.name=터진 납 퓨즈
Blue_Brush.name=파란색 솔
Brown_Brush.name=갈색 솔
Capacity_Oriented_Battery.name=용량 특화 배터리
Casing.name=케이싱
Cheap_Chip.name=값싼 회로
Cheap_Electrical_Drill.name=값싼 전기 드릴
Cheap_Ferromagnetic_Core.name=값싼 강자성체 핵
Cinnabar_Dust.name=황화수은 가루
Cinnabar_Ore.name=황화수은 원석
Coal_Dust.name=탄소 가루
Coal_Plate.name=탄소 판
Combustion_Chamber.name=연소기
Configurable_summing_unit.name=설정가능한 합산기
Copper_Cable.name=구리선
Copper_Dust.name=구리 가루
Copper_Ingot.name=구리 덩어리
Copper_Ore.name=구리 원석
Copper_Plate.name=구리판
Copper_Thermal_Cable.name=구리 열선
Cost_Oriented_Battery.name=비용 특화 배터리
Current_Oriented_Battery.name=전류 특화 배터리
Cyan_Brush.name=청록색 솔
DC-DC_Converter.name=DC-DC 변환기
D_Flip_Flop_Chip.name=D 플립-플롭 칩
Data_Logger.name=데이터 기록계
Data_Logger_Print.name=데이터 기록계 인쇄물
Dielectric.name=절연체
Digital_Watch.name=디지털 시계
Electrical_Anemometer_Sensor.name=전자 풍속 센서
Electrical_Breaker.name=회로 차단기
Electrical_Daylight_Sensor.name=전자 태양광 센서
Electrical_Entity_Sensor.name=전자 엔티티 센서
Electrical_Fire_Buzzer.name=전자 화재 경보기
Electrical_Fire_Detector.name=전자 불 감지기
Electrical_Furnace.name=전자 화로
Electrical_Fuse_Holder.name=전기 퓨즈 꽂이
Electrical_Light_Sensor.name=전자 빛 센서
Electrical_Motor.name=전자 모터
Electrical_Probe.name=전자 탐지기
Electrical_Probe_Chip.name=전자 탐지기 회로
Electrical_Source.name=전원
Electrical_Timer.name=전자 타이머
Electrical_Weather_Sensor.name=전자 기상 센서
Electrical_age_wrench,\nCan_be_used_to_turn\nsmall_wall_blocks=Electrical age wrench,\nCan be used to turn\nsmall wall blocks
Energy_Meter.name=에너지 측정기
Experimental_Transporter.name=시험용 이동기
Fast_Electrical_Drill.name=빠른 전자 드릴
Ferrite_Ingot.name=아철산염 덩어리
Flat_Lamp_Socket.name=평평한 램프 소켓
Fluorescent_Lamp_Socket.name=형광등 소켓
Flywheel.name=플라이휠
Fuel_Heat_Furnace.name=연료 열 화로
Gas_Turbine.name=터빈
Generator.name=발전기
Gold_Dust.name=금 가루
Gold_Plate.name=금 판
Gray_Brush.name=회색 솔
Green_Brush.name=초록색 솔
Ground_Cable.name=접지선
High_Power_Receiver_Antenna.name=고전력 수신 안테나
High_Power_Transmitter_Antenna.name=고전력 송신 안테나
High_Voltage_Cable.name=고전압 전선
High_Voltage_Relay.name=고전압 릴레이
High_Voltage_Switch.name=고전압 스위치
Hub.name=허브
Industrial_Data_Logger.name=산업용 데이터 기록계
Iron_Cable.name=철 선
Iron_Dust.name=철가루
Iron_Plate.name=철판
JK_Flip_Flop_Chip.name=JK 플립-플롭 칩
Joint.name=교차점
Joint_hub.name=교차점 허브
LED_vuMeter.name=LED vu미터
Lamp_Socket_A.name=램프 소켓 A
Lamp_Socket_B_Projector.name=램프 소켓 B 발사기
Lamp_Supply.name=램프 공급기
Large_Rheostat.name=대형 가변저항기
Lead_Dust.name=납 가루
Lead_Fuse_for_high_voltage_cables.name=고압 전선을 위한 납 퓨즈
Lead_Fuse_for_low_voltage_cables.name=저전압 전선을 위한 납 퓨즈
Lead_Fuse_for_medium_voltage_cables.name=중간전압 전선을 위한 납 퓨즈
Lead_Fuse_for_very_high_voltage_cables.name=초고전압 전선을 위한 납 퓨즈
Lead_Ingot.name=납 덩어리
Lead_Ore.name=납 원석
Lead_Plate.name=납 판
Life_Oriented_Battery.name=수명 특화 배터리
Light_Blue_Brush.name=밝은 청색 솔
Lime_Brush.name=라임색 솔
Long_Suspended_Lamp_Socket.name=긴 현수등 소켓
Low_Power_Receiver_Antenna.name=저전력 수신 안테나
Low_Power_Transmitter_Antenna.name=저전력 송신 안테나
Low_Voltage_Cable.name=저전력 전선
Low_Voltage_Relay.name=저전력 릴레이
Low_Voltage_Switch.name=저전력 스위치
Lowpass_filter.name=고주파 필터
Machine_Block.name=기계 블록
Machine_Booster.name=기계 부스터
Magenta_Brush.name=진분홍 솔
Medium_Fuel_Burner.name=중간 연료 버너
Medium_Power_Receiver_Antenna.name=중간전력 수신 안테나
Medium_Power_Transmitter_Antenna.name=중간전력 송신 안테나
Medium_Voltage_Cable.name=중간전력 전선
Medium_Voltage_Relay.name=중간전력 린레이
Medium_Voltage_Switch.name=중간전력 스위치
Mercury.name=수은
Mining_Pipe.name=채굴 파이프
Modbus_RTU.name=모드버스 RTU
Modern_Data_Logger.name=현대식 데이터 기록계
Monster_Filter.name=괴물 필터
MultiMeter.name=다중 계측기
NAND_Chip.name=NAND 칩
NOR_Chip.name=NOR 칩
NOT_Chip.name=NOT 칩
Nuclear_Alarm.name=핵폭탄 알람
OR_Chip.name=OR 칩
On_OFF_Regulator_10_Percent.name=온/오프 래귤레이터 10%
On_OFF_Regulator_1_Percent.name=온/오프 래귤레이터 1%
OpAmp.name=Op-Amp
Optimal_Ferromagnetic_Core.name=최적 강자성체 핵
Orange_Brush.name=오렌지색 솔
Ore_Scanner.name=원석 스캐너
Oscillator_Chip.name=오실레이터 칩
Overheating_Protection.name=과열 보호
Overvoltage_Protection.name=과전압 보호
PAL_Chip.name=PAL 칩
PID_Regulator.name=PID 조절기
Pink_Brush.name=분홍색 솔
Player_Filter.name=플레이어 필터
Portable_Battery.name=휴대용 배터리
Portable_Battery_Pack.name=휴대용 배터리 다발
Portable_Condensator.name=휴대용 캐퍼시터
Portable_Condensator_Pack.name=휴대용 캐퍼시터 팩
Portable_Electrical_Axe.name=휴대용 전자 도끼
Portable_Electrical_Mining_Drill.name=휴대용 전자 채굴용 드릴
Power_Capacitor.name=축전기
Power_Inductor.name=인덕터
Power_Resistor.name=저항
Power_capacitor.name=파워 캐퍼시터
Power_inductor.name=파워 인덕터
Purple_Brush.name=자색 솔
Red_Brush.name=적색 솔
Redstone-to-Voltage_Converter.name=레드스톤 -> 전압 변환기
Rheostat.name=가변 저항
Robust_Lamp_Socket.name=튼튼한 램프 소켓
Rubber.name=고무
Sample_and_hold.name=샘플링 후 보류
Scanner.name=스캐너
Schmitt_Trigger_Chip.name=슈미트 트리거
Sconce_Lamp_Socket.name=촛대 전등 소켓
Signal_20H_inductor.name=신호 20H 인덕터
Signal_Antenna.name=신호 안테나
Signal_Button.name=신호 버튼
Signal_Cable.name=신호 케이블
Signal_Diode.name=신호 다이오드
Signal_Processor.name=신호 처리기
Signal_Relay.name=신호 중계기
Signal_Source.name=신호원
Signal_Switch.name=신호 스위치
Signal_Switch_with_LED.name=LED포함 신호 스위치
Signal_Trimmer.name=신호 조절기
Silicon_Dust.name=실리콘 가루
Silicon_Ingot.name=실리콘 덩어리
Silicon_Plate.name=실리콘 판
Silver_Brush.name=은색 솔
Simple_Lamp_Socket.name=간단한 램프 소켓
Single-use_Battery.name=일회용 배터리
Small_200V_Copper_Heating_Corp.name=소형 200V 구리 열선
Small_200V_Iron_Heating_Corp.name=소형 200V 철제 열선
Small_200V_Tungsten_Heating_Corp.name=소형 200V 텅스텐 열선
Small_50V_Carbon_Incandescent_Light_Bulb.name=소형 50V 탄소 백열등
Small_50V_Copper_Heating_Corp.name=소형 50V 구리 열선
Small_50V_Economic_Light_Bulb.name=소형 50V 친환경 전구
Small_50V_Incandescent_Light_Bulb.name=소형 50V 백열등
Small_50V_Iron_Heating_Corp.name=소형 50V 철제 열선
Small_50V_Tungsten_Heating_Corp.name=소형 50V 텅스텐 열선
Small_Active_Thermal_Dissipator.name=소형 능동 열 발산기
Small_Flashlight.name=소형 손전등
Small_Fuel_Burner.name=작은 연료 버너
Small_Passive_Thermal_Dissipator.name=소형 공냉식 열 발산기
Small_Rotating_Solar_Panel.name=소형 회전 태양광 패널
Small_Solar_Panel.name=소형 태양광 패널
Solar_Tracker.name=태양 추적기
Standard_Alarm.name=일반 알람
Steam_Turbine.name=스팀 터핀
Stone_Heat_Furnace.name=석제 화로
Street_Light.name=가로등
Suspended_Lamp_Socket.name=현수등 소켓
Tachometer.name=회전속도계
Temperature_Probe.name=온도 측정기
Thermal_Probe.name=열 측정기
Thermal_Probe_Chip.name=열 측정기 회로
Thermistor.name=서미스터
Thermometer.name=온도계
Tree_Resin.name=나무 수액
Tree_Resin_Collector.name=나무 수액 채집기
Tungsten_Cable.name=텅스텐 케이블
Tungsten_Dust.name=텅스텐 가루
Tungsten_Ingot.name=텅스텐 덩어리
Tungsten_Ore.name=텅스텐 원석
Tutorial_Sign.name=튜토리얼 표지판
Very_High_Voltage_Cable.name=초고전압 전선
Very_High_Voltage_Relay.name=초고전압 릴레이
Very_High_Voltage_Switch.name=초고전압 스위치
Voltage-to-Redstone_Converter.name=전압 -> 레드스톤 변환기
Voltage_Oriented_Battery.name=전압 특화 배터리
Voltage_Probe.name=전압 측정기
Voltage_controlled_amplifier.name=전압 조절 증폭기
Voltage_controlled_sawtooth_oscillator.name=전압 조절 톱니파 발진기
Voltage_controlled_sine_oscillator.name=전압 조절 사인파 발진기
Water_Turbine.name=수력 터빈
Weak_50V_Battery_Charger.name=약한 50V 배터리 충전기
White_Brush.name=백색 솔
Wind_Turbine.name=풍력 터빈
Wireless_Analyser.name=무선 분석기
Wireless_Button.name=무선 버튼
Wireless_Signal_Receiver.name=무선 신호 수신기
Wireless_Signal_Repeater.name=무선 신호 중계기
Wireless_Signal_Transmitter.name=무선 신호 송신기
Wireless_Switch.name=무선 스위치
Wrench.name=렌치
X-Ray_Scanner.name=엑스레이 스캐너
XNOR_Chip.name=XNOR 칩
XOR_Chip.name=XOR 칩
Yellow_Brush.name=황색 솔
entity.EAReplicator.name=복제기
item.Copper Axe.name=구리 도끼
item.Copper Axe.name=구리 도끼
item.Copper Axe.name=구리 도끼
item.Copper Axe.name=구리 도끼
item.Copper Axe.name=구리 도끼
item.Copper Axe.name=구리 도끼
item.Copper Axe.name=구리 도끼
item.Copper Axe.name=구리 도끼
item.Copper Axe.name=구리 도끼
item.E-Coal Boots.name=전기-석탄 부츠
item.E-Coal Boots.name=전기-석탄 부츠
item.E-Coal Boots.name=전기-석탄 부츠
item.E-Coal Boots.name=전기-석탄 부츠
itemGroup.Eln=일렉트리컬 에이지
mod.meta.desc=당신의 기지에 전기가 있습니다!
tile.eln.ElnProbe.name=Eln 컴퓨터 프로브
tile.eln.EnergyConverterElnToOtherHVUBlock.name=800V 일렉트리컬 에이지에서 다른 전기로 변환기
tile.eln.EnergyConverterElnToOtherLVUBlock.name=50V 일렉트리컬 에이지에서 다른 전기로 변환기
tile.eln.EnergyConverterElnToOtherMVUBlock.name=200V 일렉트리컬 에이지에서 다른 전기로 변환기

# ./src/main/java/mods/eln/i18n/I18N.java
You_have_%1$_lives_left=%1$ 개의 생명이 남았습니다

# ./src/main/java/mods/eln/item/BrushDescriptor.kt
Brush_is_dry=브러시가 마름
Can_paint_%1$_blocks=%1$ 개의 블록을 칠할 수 있음

# ./src/main/java/mods/eln/item/CaseItemDescriptor.kt
Can_be_used_to_encase_EA_items_that_support_it=그것을 지원하는 EA 아이템을 포장하는 데 사용할 수 있습니다.

# ./src/main/java/mods/eln/item/CombustionChamber.java
Upgrade_for_the_Stone_Heat_Furnace.=석제 화로를 위해 업그레이드 하세요.

# ./src/main/java/mods/eln/item/ElectricalDrillDescriptor.java
Energy_per_operation\:_%1$J=한번 작업에 쓰이는 에너지: %1$J
Time_per_operation\:_%1$h=소요 시간: %1$h

# ./src/main/java/mods/eln/item/FerromagneticCoreDescriptor.java
Cable_loss_factor\:_%1$=도선 저항 계수: %1$

# ./src/main/java/mods/eln/item/FuelBurnerDescriptor.kt
Burn_unit_for_the_gas_heat_furnace.=가스 화로 용 연소 장치.
Produced_heat_power\:_=생산되는 열 세기:

# ./src/main/java/mods/eln/item/HeatingCorpElement.java

# ./src/main/java/mods/eln/item/LampDescriptor.java
Bad=나쁨
Condition\:=상태:
End_of_life=생명이 다함
Good=양호
New=새
Nominal_lifetime\:_%1$h=평균적 수명: %1$시간
Technology\:_%1$=기술력: %1$
Used=쓰임

# ./src/main/java/mods/eln/item/LampSlot.java
Lamp_slot=램프 슬릇

# ./src/main/java/mods/eln/item/OverHeatingProtectionDescriptor.java
Useful_to_prevent_overheating\nof_Batteries=배터리 과열 방지에 효과적

# ./src/main/java/mods/eln/item/OverVoltageProtectionDescriptor.java
Useful_to_prevent_over-voltage\nof_Batteries=배터리 과충전 방지에 효과적

# ./src/main/java/mods/eln/item/SolarTrackerDescriptor.java
Solar_panel_upgrade=태양광 패널 업그레이드

# ./src/main/java/mods/eln/item/electricalitem/BatteryItem.java

# ./src/main/java/mods/eln/item/electricalitem/ElectricalLampItem.java
State\:=현재 상태:
Stored_Energy\:_%1$J_(%2$%)=축적된 에너지: %1$J (%2$%)

# ./src/main/java/mods/eln/item/regulator/RegulatorSlot.java

# ./src/main/java/mods/eln/mechanical/Tachometer.kt
Rads_s_corresponding\nto_0%_output=Rads/s corresponding\nto 0% output
Rads_s_corresponding\nto_100%_output=Rads/s corresponding\nto 100% output

# ./src/main/java/mods/eln/misc/UtilsClient.java
Hold_shift=쉬프트를 누른 채 유지하세요

# ./src/main/java/mods/eln/misc/Version.java
mod.name=전자 시대

# ./src/main/java/mods/eln/node/six/SixNodeDescriptor.java

# ./src/main/java/mods/eln/simplenode/energyconverter/EnergyConverterElnToOtherGui.java
Input_power_is_limited_to_%1$W=입력 전력은 %1$W로 제한됩니다

# ./src/main/java/mods/eln/sixnode/AnalogChips.kt
A_voltage-controlled_amplifier_(VCA)\nis_an_electronic_amplifier_that_varies\nits_gain_depending_on_the_control_voltage.=A voltage-controlled amplifier (VCA)\nis an electronic amplifier that varies\nits gain depending on the control voltage.
A_voltage-controlled_oscillator_or_VCO_is\nan_electronic_oscillator_whose_oscillation\nfrequency_is_controlled_by_a_voltage_input.=A voltage-controlled oscillator or VCO is\nan electronic oscillator whose oscillation\nfrequency is controlled by a voltage input.
An_amplifier_increases_the_voltage\nof_an_input_signal_by_a_configurable\ngain_and_outputs_that_voltage.=An amplifier increases the voltage\nof an input signal by a configurable\ngain and outputs that voltage.
Cut-off_frequency_%1$_Hz=차단 주파수 %1$ Hz
Gain=이득
Gain_for_input_\u00a713=다음을 위한 이득: 입력 \u00a713
Gain_for_input_\u00a722=다음을 위한 이득: 입력 \u00a722
Gain_for_input_\u00a741=다음을 위한 이득: 입력 \u00a741
Lowpass_filter_-_Passes_signals_with_a\nfrequency_lower_than_a_certain_cutoff_frequency\nand_attenuates_signals_with_frequencies_higher\nthan_the_cutoff_frequency.=Lowpass filter - Passes signals with a\nfrequency lower than a certain cutoff frequency\nand attenuates signals with frequencies higher\nthan the cutoff frequency.
Operational_Amplifier_-_DC_coupled\nhigh-gain_voltage_amplifier_with\ndifferential_input._Can_be_used_to\ncompare_voltages_or_as_configurable_amplifier.=Operational Amplifier - DC coupled\nhigh-gain voltage amplifier with\ndifferential input. Can be used to\ncompare voltages or as configurable amplifier.
Params=매개 변수들
Proportional–integral–derivative_controller._A_PID\ncontroller_continuously_calculates_an_error_value_as\nthe_difference_between_a_desired_setpoint_and_a_measured\nprocess_variable_and_applies_a_correction_based_on\nproportional,_integral,_and_derivative_terms.=Proportional–integral–derivative controller. A PID\ncontroller continuously calculates an error value as\nthe difference between a desired setpoint and a measured\nprocess variable and applies a correction based on\nproportional, integral, and derivative terms.
Samples_the_voltage_of_a_varying_analog_signal_when\nthe_clock_input_changes_from_0_to_1_and_holds_its\noutput_voltage_at_a_constant_level_until_next_clock_pulse.\nYou_can_see_it_as_an_analog_D-Flipflop.=Samples the voltage of a varying analog signal when\nthe clock input changes from 0 to 1 and holds its\noutput voltage at a constant level until next clock pulse.\nYou can see it as an analog D-Flipflop.
The_summing_unit_outputs_the_sum_of\nthe_three_weighted_inputs.The\ngain_for_each_input_can_be_configured.=The summing unit outputs the sum of\nthe three weighted inputs.The\ngain for each input can be configured.

# ./src/main/java/mods/eln/sixnode/ElectricalFuse.kt
Protects_electrical_components.\nFuse_melts_if_current_exceeds_the\nfuse_limit=Protects electrical components.\nFuse melts if current exceeds the\nfuse limit

# ./src/main/java/mods/eln/sixnode/EmergencyLamp.kt

# ./src/main/java/mods/eln/sixnode/LogicGate.kt
A_Programmable_Array_Logic_(PAL)_is_a_programmable\nlogic_device_semiconductors_used_to__implement_any_logic\nfunction_in_only_one_digital_circuit._The_function_is\nstateless,_which_means_that_no_intermediate_state_is_saved.=A Programmable Array Logic (PAL) is a programmable\nlogic device semiconductors used to  implement any logic\nfunction in only one digital circuit. The function is\nstateless, which means that no intermediate state is saved.
If_the_input_J_is_1_(high)_and_K_is_0_(low)\nduring_a_clock_pulse,_the_output_becomes_1_(high).\nIf_J_is_0_(low)_and_K_is_1_(high)_during_the_pulse,\nthe_output_becomes_0_(low)._If_both_inputs_are_0_(low)\nduring_the_clock_pulse,_the_state_is_maintained._If_both\ninputs_are_1_(high)_the_input_is_toggled_if_a_rising_edge\nwas_detected_at_the_clock_input.=If the input J is 1 (high) and K is 0 (low)\nduring a clock pulse, the output becomes 1 (high).\nIf J is 0 (low) and K is 1 (high) during the pulse,\nthe output becomes 0 (low). If both inputs are 0 (low)\nduring the clock pulse, the state is maintained. If both\ninputs are 1 (high) the input is toggled if a rising edge\nwas detected at the clock input.
If_the_input_voltage_is_lower_than_10V,_the\noutput_is_0_(low),_if_the_output_is_bigger_or\nequal_to_30V,_the_output_will_be_1_(high)._For\nall_voltages_in_between,_the_output_does_not_change.=If the input voltage is lower than 10V, the\noutput is 0 (low), if the output is bigger or\nequal to 30V, the output will be 1 (high). For\nall voltages in between, the output does not change.
Implements_an_exclusive_or.\nAn_output_of_1_(high)_results_if_one_or\nall_three_inputs_to_the_gate_are_1_(high).=Implements an exclusive or.\nAn output of 1 (high) results if one or\nall three inputs to the gate are 1 (high).
Implements_logical_conjunction.\nA_1_(high)_output_results_only_if_all_of\nthe_three_inputs_to_the_AND_gate_are_1_(high).=Implements logical conjunction.\nA 1 (high) output results only if all of\nthe three inputs to the AND gate are 1 (high).
Implements_logical_disjunction.\nA_1_(high)_output_results_if_at_least\none_input_to_the_gate_is_1_(high).=Implements logical disjunction.\nA 1 (high) output results if at least\none input to the gate is 1 (high).
Inverts_the_input_signal.\nOutputs_a_voltage_representing_the\nopposite_logic-level_to_its_input.=Inverts the input signal.\nOutputs a voltage representing the\nopposite logic-level to its input.
Its_output_is_complement_(inverted)\nto_that_of_the_AND_gate.=Its output is complement (inverted)\nto that of the AND gate.
Its_output_is_complement_(inverted)\nto_that_of_the_OR_gate.=Its output is complement (inverted)\nto that of the OR gate.
Its_output_is_complement_(inverted)\nto_that_of_the_XOR_gate.=Its output is complement (inverted)\nto that of the XOR gate.
Outputs_a_rectangular_signal_which's_frequency\ndepends_to_the_input_voltage._The_higher_the\ninput_voltage_-_the_higher_the_frequency.=Outputs a rectangular signal which's frequency\ndepends to the input voltage. The higher the\ninput voltage - the higher the frequency.
The_D_flip-flop_captures_the_value\nof_the_D-input_at_a_rising_edge\nportion_of_the_clock_cycle.=The D flip-flop captures the value\nof the D-input at a rising edge\nportion of the clock cycle.
UNDEF=UNDEFINED

# ./src/main/java/mods/eln/sixnode/Scanner.kt
-_For_inventories,_outputs_either_total_fill_or_fraction_of_slots_with_any_items.=- 인벤토리의 경우, 항목의 총 채우기 또는 슬롯 분율을 출력합니다.
-_For_tanks,_outputs_fill_percentage.=- 탱크의 경우 채워진 백분율을 출력합니다.
Otherwise_behaves_as_a_vanilla_comparator.=그렇지 않으면 바닐라 비교기처럼 행동합니다.
Right-click_to_change_mode.=마우스 오른쪽 버튼을 클릭하여 모드를 변경하십시오.
Scans_blocks_to_produce_signals.=블록을 스캔하여 신호를 생성합니다.

# ./src/main/java/mods/eln/sixnode/TreeResinCollector/TreeResinCollectorDescriptor.java
Produces_Tree_Resin_over\ntime_when_put_on_a_tree.=나무에 부착되면\n나무수액을 만듦.
This_block_can_only_be_placed_on_the_side_of_a_tree!=이 블럭은 나무블럭의 면에만 설치 될 수 있습니다!

# ./src/main/java/mods/eln/sixnode/batterycharger/BatteryChargerContainer.java
Battery_slot=배터리 슬릇

# ./src/main/java/mods/eln/sixnode/batterycharger/BatteryChargerDescriptor.java
Can_be_used_to_recharge\nelectrical_items_like\:\nFlash_Light,_X-Ray_scanner\nand_Portable_Battery_...=손전등, 엑스레이 스캐너와\n휴대용 배터리와 같은\n전기 아이템을\n충전하는데 쓰임.

# ./src/main/java/mods/eln/sixnode/batterycharger/BatteryChargerElement.java
Charge_Current=충전 전류

# ./src/main/java/mods/eln/sixnode/batterycharger/BatteryChargerGui.java

# ./src/main/java/mods/eln/sixnode/diode/DiodeDescriptor.java
Electrical_current_can_only\nflow_through_the_diode\nfrom_anode_to_cathode=전류는 다이오드의\n애노드에서 캐소드로만\n흐를 수 있음

# ./src/main/java/mods/eln/sixnode/diode/DiodeElement.java
Forward_Voltage=순방향 전압

# ./src/main/java/mods/eln/sixnode/electricalalarm/ElectricalAlarmDescriptor.java
Emits_an_acoustic_alarm_if\nthe_input_signal_is_high=입력 신호가 있으면\n소리 알람을 울림

# ./src/main/java/mods/eln/sixnode/electricalalarm/ElectricalAlarmElement.java
Engaged=연동의
Input_Voltage=입력 전압

# ./src/main/java/mods/eln/sixnode/electricalalarm/ElectricalAlarmGui.java
Sound_is_muted=소리가 뮤트됨
Sound_is_not_muted=소리가 뮤트되지 않음

# ./src/main/java/mods/eln/sixnode/electricalbreaker/ElectricalBreakerContainer.java

# ./src/main/java/mods/eln/sixnode/electricalbreaker/ElectricalBreakerDescriptor.java
Protects_electrical_components\nOpens_contact_if\:\n__-_Voltage_exceeds_a_certain_level\n-_Current_exceeds_the_cable_limit=전자 구성물을 보호함\n- 전압이 기준을 초과하거나\n- 전류가 전선 한계를 넘으면\n전류를 끊음

# ./src/main/java/mods/eln/sixnode/electricalbreaker/ElectricalBreakerElement.java
Contact=접점

# ./src/main/java/mods/eln/sixnode/electricalbreaker/ElectricalBreakerGui.java
Maximum_voltage_before_cutting_off=최대 한계 전압
Minimum_voltage_before_cutting_off=최소 한계 전압
Switch_is_off=스위치가 꺼지
Switch_is_on=스위치가 켜짐

# ./src/main/java/mods/eln/sixnode/electricalcable/ElectricalCableDescriptor.java
A_signal_is_electrical_information\nwhich_must_be_between_0V_and_%1$=A signal is electrical information\nwhich must be between 0V and %1$
Cable_is_adapted_to_conduct\nelectrical_signals.=전선은 전기 신호를\n전달하는데 쓰인다.
Current\:_%1$A=전류: %1$A
Not_adapted_to_transport_power.=전력 이송에 적합하지 않음.
Save_usage\:=저장된 쓰임:
Serial_resistance\:_%1$\u2126=Serial resistance: %1$\u2126

# ./src/main/java/mods/eln/sixnode/electricalcable/ElectricalCableElement.java
Signal_Voltage=신호 전압

# ./src/main/java/mods/eln/sixnode/electricaldatalogger/ElectricalDataLoggerDescriptor.java
It_can_store_up_to_256_points.=256개의 점 까지 저장할 수 있습니다.
Measures_the_voltage_of_an\nelectrical_signal_and_plots\nthe_data_in_real_time.=전기 신호와 기타 등의\n전압을 실시간으로\n측정한다.

# ./src/main/java/mods/eln/sixnode/electricaldatalogger/ElectricalDataLoggerElement.java

# ./src/main/java/mods/eln/sixnode/electricaldatalogger/ElectricalDataLoggerGui.java
Back_to_display=디스플레이로 돌아가기
Configuration=설정
Current_[A]=현재 [A]
Energy_[J]=에너지 [J]
Percent_[-]%=퍼센트 [-]%
Power_[W]=파워 [W]
Print=인쇄
Sampling_period=샘플링 주기
Temp._[*C]=온도 [*C]
Voltage_[V]=전압 [V]
Y-axis_max=Y-축 최대
Y-axis_min=Y-축 최소

# ./src/main/java/mods/eln/sixnode/electricalentitysensor/ElectricalEntitySensorContainer.java

# ./src/main/java/mods/eln/sixnode/electricalentitysensor/ElectricalEntitySensorDescriptor.java
Output_voltage_increases\nif_entities_are_moving_around.=개체가 돌아다닌다면\n전압 출력이 증가합니다.

# ./src/main/java/mods/eln/sixnode/electricalentitysensor/ElectricalEntitySensorElement.java
Entity_present=엔티티 존재

# ./src/main/java/mods/eln/sixnode/electricalfiredetector/ElectricalFireDetectorContainer.kt

# ./src/main/java/mods/eln/sixnode/electricalfiredetector/ElectricalFireDetectorDescriptor.java
Battery_powered_buzzer_\nactivated_in_presence_of_fire.=Battery powered buzzer \nactivated in presence of fire.
Output_voltage_increases\nif_a_fire_has_been_detected.=불이 감지되면\n전압 출력이 증가합니다.

# ./src/main/java/mods/eln/sixnode/electricalfiredetector/ElectricalFireDetectorElement.java
Fire_detected\:_=불 감지됨:
Fire_present=화재 존재

# ./src/main/java/mods/eln/sixnode/electricalgatesource/ElectricalGateSourceDescriptor.java
Provides_configurable_signal\nvoltage.=설정가능한 전압 신호를\n제공합니다.

# ./src/main/java/mods/eln/sixnode/electricalgatesource/ElectricalGateSourceGui.java
Output_at_%1$%=%1$%일 때의 출력

# ./src/main/java/mods/eln/sixnode/electricallightsensor/ElectricalLightSensorDescriptor.java
0V_at_night,_%1$V_at_noon.=밤에는 0V, 정오에는 %1$V.
Provides_an_electrical_voltage\nin_the_presence_of_light.=Provides an electrical voltage\nin the presence of light.
Provides_an_electrical_voltage\nwhich_is_proportional_to\nthe_intensity_of_daylight.=Provides an electrical voltage\nwhich is proportional to\nthe intensity of daylight.

# ./src/main/java/mods/eln/sixnode/electricallightsensor/ElectricalLightSensorElement.java
Light_level=빛 래벨

# ./src/main/java/mods/eln/sixnode/electricalmath/ElectricalMathContainer.java

# ./src/main/java/mods/eln/sixnode/electricalmath/ElectricalMathDescriptor.java
Applicable_boolean_operators\:=가능한 논리 연산자:
Applicable_functions\:=가능한 기능:
Applicable_mathematical_operators\:=가능한 수학 연산자:
Calculates_an_output_signal_from\n3_inputs_(A,_B,_C)_using_an_equation.=Calculates an output signal from\n3 inputs (A, B, C) using an equation.

# ./src/main/java/mods/eln/sixnode/electricalmath/ElectricalMathElement.java
Equation=방정식
Input_voltages=입력 전압

# ./src/main/java/mods/eln/sixnode/electricalmath/ElectricalMathGui.java
%1$_Redstone(s)_required=%1$개의 래드스톤(들)이 필요합니다
Equation_required!=방정식 필요함!
Inputs_are=입력은
Invalid_equation!=유효하지 않은 방정식!
Output_voltage_formula=출력 전압 공식
Waiting_for_completion...=완료를 기다리는중...

# ./src/main/java/mods/eln/sixnode/electricalredstoneinput/ElectricalRedstoneInputDescriptor.java
Converts_Redstone_signal\nto_an_electrical_voltage.=Converts Redstone signal\nto an electrical voltage.

# ./src/main/java/mods/eln/sixnode/electricalredstoneinput/ElectricalRedstoneInputElement.java

# ./src/main/java/mods/eln/sixnode/electricalredstoneoutput/ElectricalRedstoneOutputDescriptor.java
Converts_electrical_voltage\ninto_a_Redstone_signal.=Converts electrical voltage\ninto a Redstone signal.

# ./src/main/java/mods/eln/sixnode/electricalredstoneoutput/ElectricalRedstoneOutputElement.java

# ./src/main/java/mods/eln/sixnode/electricalrelay/ElectricalRelayDescriptor.java
A_relay_is_an_electrical\ncontact_that_conducts_electric\ncurrent_or_not,_depending\nthe_actual_input_signal_voltage.=A relay is an electrical\ncontact that conducts electric\ncurrent or not, depending\nthe actual input signal voltage.

# ./src/main/java/mods/eln/sixnode/electricalrelay/ElectricalRelayElement.java
Default_position=기존 위치

# ./src/main/java/mods/eln/sixnode/electricalrelay/ElectricalRelayGui.java
Normally_closed=평범하게 닫힘
Normally_open=평범하게 열림

# ./src/main/java/mods/eln/sixnode/electricalsensor/ElectricalSensorDescriptor.java
Can_measure_Voltage_Power_Current=전압/전력/현재를 측정 가능합니다.
Measures_electrical_values_on_cables.=케이블의 전기 값을 측정합니다.
Measures_voltage_on_cables.=케이블의 볼트를 측정합니다.

# ./src/main/java/mods/eln/sixnode/electricalsensor/ElectricalSensorElement.java
Measured_current=측정된 현재
Measured_power=측정된 전원
Measured_voltage=측정된 전압

# ./src/main/java/mods/eln/sixnode/electricalsensor/ElectricalSensorGui.java
Measured_voltage\ncorresponding\nto_0%_output=Measured voltage\ncorresponding\nto 0% output
Measured_voltage\ncorresponding\nto_100%_output=Measured voltage\ncorresponding\nto 100% output

# ./src/main/java/mods/eln/sixnode/electricalsource/ElectricalSourceDescriptor.java
Creative_block.=크리에이티브 블록
Provides_an_ideal_voltage_source\nwithout_energy_or_power_limitation.=Provides an ideal voltage source\nwithout energy or power limitation.

# ./src/main/java/mods/eln/sixnode/electricalswitch/ElectricalSwitchDescriptor.java
Can_break_an_electrical_circuit\ninterrupting_the_current.=Can break an electrical circuit\ninterrupting the current.

# ./src/main/java/mods/eln/sixnode/electricaltimeout/ElectricalTimeoutDescriptor.java
Upon_application_of_a_high_signal,\nthe_timer_maintains_the_output_high_for\na_configurable_interval._Can_be_re-triggered.=Upon application of a high signal,\nthe timer maintains the output high for\na configurable interval. Can be re-triggered.

# ./src/main/java/mods/eln/sixnode/electricaltimeout/ElectricalTimeoutElement.java
Output=출력
Remaining=남음

# ./src/main/java/mods/eln/sixnode/electricaltimeout/ElectricalTimeoutGui.java
Set=설정
The_time_interval_the\noutput_is_kept_high.=The time interval the\noutput is kept high.

# ./src/main/java/mods/eln/sixnode/electricalvumeter/ElectricalVuMeterDescriptor.java
Displays_the_value_of_a_signal.=시그널 값을 표시합니다.

# ./src/main/java/mods/eln/sixnode/electricalweathersensor/ElectricalWeatherSensorDescriptor.java
Clear\:_%1$V=맑음: %1$V
Provides_an_electrical_signal\ndepending_the_actual_weather.=Provides an electrical signal\ndepending the actual weather.
Rain\:_%1$V=비: %1$V
Storm\:_%1$V=폭풍: %1$V

# ./src/main/java/mods/eln/sixnode/electricalwindsensor/ElectricalWindSensorDescriptor.java
Maximum_wind_speed_is_%1$m_s=최고 바람 속도는 %1$m/s 입니다.
Provides_an_electrical_signal\ndependant_on_wind_speed.=Provides an electrical signal\ndependant on wind speed.
You_can't_place_this_block_on_the_floor_or_the_ceiling=당신은 이 블럭을 천장이나 바닥에 설치 할 수 없습니다.

# ./src/main/java/mods/eln/sixnode/energymeter/EnergyMeterElement.java
Counter=카운터
Energy_left=남은 에너지
Mode=모드
Prepay=선불

# ./src/main/java/mods/eln/sixnode/energymeter/EnergyMeterGui.java
Change_password=비밀번호 바꾸기
Counter_Mode=카운터 모드
Counts_the_energy_conducted_from\n\u00a74red\u00a7f_to_\u00a71blue\u00a7f.=Counts the energy conducted from\n\u00a74red\u00a7f to \u00a71blue\u00a7f.
Energy_counter\:_%1$J=에너지 카운터:%1$J
Enter_new_energy=새로운 에너지 입력
Enter_password=비밀번호 입력
Prepay_Mode=선불 모드
Reset_time_counter=시간 카운터 리셋
Set_energy_counter=에너지 카운터 설장
Time_counter\:=시간 카운터:
Try_password=비밀번호 시도
You_can_set_an_initial\namount_of_available_energy.\nWhen_the_counter_arrives_at_0\nthe_contact_will_be_opened.=You can set an initial\namount of available energy.\nWhen the counter arrives at 0\nthe contact will be opened.
is_off=꺼짐
is_on=켜짐
value_in_kJ=kJ로 표시

# ./src/main/java/mods/eln/sixnode/groundcable/GroundCableDescriptor.java
Can_be_used_to_set_a_point_of_an\nelectrical_network_to_0V_potential.\nFor_example_to_ground_negative_battery_contacts.=Can be used to set a point of an\nelectrical network to 0V potential.\nFor example to ground negative battery contacts.
Provides_a_zero_volt_reference.=0볼트를 생성합니다

# ./src/main/java/mods/eln/sixnode/hub/HubDescriptor.java
Allows_crossing_cables\non_one_single_block.=Allows crossing cables\non one single block.

# ./src/main/java/mods/eln/sixnode/lampsocket/LampSocketDescriptor.java
Angle\:_%1$°_to_%2$°=각도: %1$° 에서 %2$°
Spot_range\:_%1$_blocks=스폿 장소 : %1$ 블럭

# ./src/main/java/mods/eln/sixnode/lampsocket/LampSocketElement.java
Bulb=전구

# ./src/main/java/mods/eln/sixnode/lampsocket/LampSocketGuiDraw.java
Cable_slot_empty=케이블 슬릇이 비어있음
Orientation\:_%1$°=오리엔테이션: %1$°
Parallel=병렬
Serial=직렬

# ./src/main/java/mods/eln/sixnode/lampsupply/LampSupplyContainer.java
Electrical_cable_slot\nBase_range_is_32_blocks.\nEach_additional_cable\nincreases_range_by_one.=Electrical cable slot\nBase range is 32 blocks.\nEach additional cable\nincreases range by one.

# ./src/main/java/mods/eln/sixnode/lampsupply/LampSupplyDescriptor.java
Supplies_all_lamps_on_the_channel.=채널의 있는 모든 램프에 전기를 공급합니다.

# ./src/main/java/mods/eln/sixnode/lampsupply/LampSupplyElement.java
Total_power=총 파워

# ./src/main/java/mods/eln/sixnode/lampsupply/LampSupplyGui.java
Power_channel_name=파워 채널 이름
Wireless_channel_name=무선 채널 이름

# ./src/main/java/mods/eln/sixnode/modbusrtu/ModbusRtuElement.java
Modbus_TCP=모드버스 TCP
Modbus_Unit_ID=모드버스 유닛 ID
Modbus_is_disabled,_enable_it_in_Eln.cfg=모드버스가 비활성됨, Eln.cfg에서 활성화하세요

# ./src/main/java/mods/eln/sixnode/modbusrtu/ModbusRtuGui.java
Add=추가
Channel_name=채널 이름
Modbus_ID=모드버스 ID
Modbus_RTU=모드버스 RTY
Station_ID=스테이션 ID
Station_name=스테이션 이름
Wireless_RX=무선 RX
Wireless_TX=무선 RX

# ./src/main/java/mods/eln/sixnode/powercapacitorsix/PowerCapacitorSixContainer.java
(Increases_maximum_voltage)=(최대 전압 상승)

# ./src/main/java/mods/eln/sixnode/powercapacitorsix/PowerCapacitorSixElement.java
Capacity=용량

# ./src/main/java/mods/eln/sixnode/powercapacitorsix/PowerCapacitorSixGui.java

# ./src/main/java/mods/eln/sixnode/powerinductorsix/PowerInductorSixContainer.java

# ./src/main/java/mods/eln/sixnode/powerinductorsix/PowerInductorSixElement.java
Inductance=언덕턴스

# ./src/main/java/mods/eln/sixnode/powerinductorsix/PowerInductorSixGui.java

# ./src/main/java/mods/eln/sixnode/powersocket/PowerSocketDescriptor.java
Supplies_any_device\nplugged_in_with_energy.=Supplies any device\nplugged in with energy.

# ./src/main/java/mods/eln/sixnode/powersocket/PowerSocketGui.java
Specify_the_device_to_supply_through_this_socket.=이 소켓을 통해  공급할 장치를 설정하세요.

# ./src/main/java/mods/eln/sixnode/resistor/ResistorContainer.java
(Sets_resistance)=(저항을 설정한다)
Coal_dust_slot=석탄 가루 슬릇

# ./src/main/java/mods/eln/sixnode/resistor/ResistorElement.java

# ./src/main/java/mods/eln/sixnode/thermalcable/ThermalCableDescriptor.java
High_parallel_resistance\n_\=>_Low_power_dissipation.=High parallel resistance\n => Low power dissipation.
Low_serial_resistance\n_\=>_High_conductivity.=Low serial resistance\n => High conductivity.
Parallel_resistance\:_%1$K_W=병렬 저항력: %1$K/W
Serial_resistance\:_%1$K_W=직렬 저항력: %1$K/W

# ./src/main/java/mods/eln/sixnode/thermalcable/ThermalCableElement.java
Thermic_power=화력

# ./src/main/java/mods/eln/sixnode/thermalsensor/ThermalSensorContainer.java
Cable_slot=케이블 슬릇

# ./src/main/java/mods/eln/sixnode/thermalsensor/ThermalSensorDescriptor.java
Can_measure\:=측정 가능:
Measures_temperature_of_cables.=케이블을 온도를 측정합니다
Measures_thermal_values_on_cables.=케이블의 열 온도를 측정합니다.
__Temperature_Power_conducted=온도/전력 전달됨

# ./src/main/java/mods/eln/sixnode/thermalsensor/ThermalSensorElement.java
Measured_temperature=측정된 온도
Measured_thermal_power=측정된 열 세기

# ./src/main/java/mods/eln/sixnode/thermalsensor/ThermalSensorGui.java
Measured_temperature\ncorresponding\nto_0%_output=Measured temperature\ncorresponding\nto 0% output
Measured_temperature\ncorresponding\nto_100%_output=Measured temperature\ncorresponding\nto 100% output

# ./src/main/java/mods/eln/sixnode/tutorialsign/TutorialSignElement.java
No_text_associated_to_this_beacon=이 비콘에 할당된 텍스트 없음

# ./src/main/java/mods/eln/sixnode/tutorialsign/TutorialSignGui.java
Set_beacon_name=비콘 이름 설정

# ./src/main/java/mods/eln/sixnode/wirelesssignal/rx/WirelessSignalRxGui.java

# ./src/main/java/mods/eln/transparentnode/FuelGenerator.kt
Fuel_level=연료 래벨
Nominal_power\:_%1$_W=정상 전력 : %1$ W
Nominal_voltage\:_%1$_V=정상 전류 : %1$ W
Produces_electricity_using_gasoline.=가솔린으로 전기를 만듭니다.
State=상태

# ./src/main/java/mods/eln/transparentnode/FuelHeatFurnace.kt
Actual\:_%1$=실제: %1$
Analog_regulator_slot=아날로그 조절기 슬롯
Control_value_at_%1$=조절 값: %1$
Fuel_burner_slot=연료 버너 슬릇
Furnace_is_off=화로가 꺼짐
Furnace_is_on=화로가 켜짐
Heat_Power\:_%1$=화력: %1$
Set_point\:_%1$=설정 점: %1$
__Max._temperature\:_=  최고 온도:

# ./src/main/java/mods/eln/transparentnode/LargeRheostat.kt
Nom._Resistance\:_%1$=정상 저항: %1$
Power_loss=전력 손실

# ./src/main/java/mods/eln/transparentnode/autominer/AutoMinerContainer.java
Drill_slot=드릴 슬릇
Mining_pipe_slot=마이닝 파이프 슬릇
Ore_scanner_slot=원석 스캐너 슬릇

# ./src/main/java/mods/eln/transparentnode/autominer/AutoMinerDescriptor.java
Excavates_on_a_small_radius.\nExtracts_ore_on_a_bigger_radius\:\n10_blocks_radius_after_10_blocks_depth.=Excavates on a small radius.\nExtracts ore on a bigger radius:\n10 blocks radius after 10 blocks depth.

# ./src/main/java/mods/eln/transparentnode/autominer/AutoMinerElement.java
Depth=깊이
Silk_touch=실크 터치

# ./src/main/java/mods/eln/transparentnode/autominer/AutoMinerGuiDraw.java
Chest_missing_on_the\nback_of_the_auto_miner!=Chest missing on the\nback of the auto miner!
Halves_speed,_triples_power_draw=속도 반감, 소비 전력 3배 증가
Silk_Touch=실크 터치

# ./src/main/java/mods/eln/transparentnode/battery/BatteryContainer.java
Overheating_protection=과열 보호
Overvoltage_protection=과전압 보호

# ./src/main/java/mods/eln/transparentnode/battery/BatteryDescriptor.java
Actual_charge\:_=실제 충전량:
Energy_capacity\:_=에너지 용량:
Internal_resistance\:_=내부 저항:
Life_\:_=수명 :
Nominal_power\:_=평균적 전원:
Nominal_voltage\:_=평균적 전압
_charged_at_=충전됨:

# ./src/main/java/mods/eln/transparentnode/battery/BatteryGuiDraw.java
Charged=충전 됨
Discharge=방전 중
Energy\:=에너지:
Energy\:_%1$=에너지: %1$
Life\:=수명:
No_charge=충전 없음
Power_in\:=전력 입력:
Power_out\:=전력 출력

# ./src/main/java/mods/eln/transparentnode/eggincubator/EggIncubatorContainer.java
Egg_slot=달걀 슬릇

# ./src/main/java/mods/eln/transparentnode/eggincubator/EggIncubatorElement.java
Has_egg=달걀 있음

# ./src/main/java/mods/eln/transparentnode/electricalantennarx/ElectricalAntennaRxDescriptor.java
Wireless_energy_receiver.=무선 에너지 수신기

# ./src/main/java/mods/eln/transparentnode/electricalantennarx/ElectricalAntennaRxElement.java
Effective_power=유효 전력
Power_received=전력 수신됨
Receiving=수신중

# ./src/main/java/mods/eln/transparentnode/electricalantennatx/ElectricalAntennaTxDescriptor.java
Efficiency\:_%1$%_up_to_%2$%=효율: %1$% 에서 최대 %2$%
Wireless_energy_transmitter.=무선 에너지 송신기

# ./src/main/java/mods/eln/transparentnode/electricalantennatx/ElectricalAntennaTxElement.java
Efficiency=효율
Transmitting=전송중

# ./src/main/java/mods/eln/transparentnode/electricalfurnace/ElectricalFurnaceContainer.java
Heating_corp_slot=히팅 그룹 슬릇

# ./src/main/java/mods/eln/transparentnode/electricalfurnace/ElectricalFurnaceDescriptor.java
Similar_to_a_vanilla_furnace,\nbut_heats_with_electricity.=Similar to a vanilla furnace,\nbut heats with electricity.

# ./src/main/java/mods/eln/transparentnode/electricalfurnace/ElectricalFurnaceElement.java
Heating_element=가열 요소

# ./src/main/java/mods/eln/transparentnode/electricalfurnace/ElectricalFurnaceGuiDraw.java
Auto_shutdown=자동 정지
Manual_shutdown=수동 정지
Set_point\:_%1$°C=설정 온도: %1$°C

# ./src/main/java/mods/eln/transparentnode/electricalmachine/ElectricalMachineDescriptor.java
Cost=가격
Nominal_voltage\:_%1V$=Nominal voltage: %1V$

# ./src/main/java/mods/eln/transparentnode/electricalmachine/ElectricalMachineElement.java
Power_provided=제공된 전원

# ./src/main/java/mods/eln/transparentnode/heatfurnace/HeatFurnaceContainer.java
Combustion_chamber_slot=연소기 슬릇
Fuel_slot=연료 슬릇

# ./src/main/java/mods/eln/transparentnode/heatfurnace/HeatFurnaceElement.java
Set_temperature=설정 온도

# ./src/main/java/mods/eln/transparentnode/heatfurnace/HeatFurnaceGuiDraw.java
Control_gauge_at_%1$%=조절 게이지: %1$%
Decline_fuel=연료 거부
Take_fuel=연료 가저가기

# ./src/main/java/mods/eln/transparentnode/powercapacitor/PowerCapacitorContainer.java
(Increases_maximal_voltage)=(최대 전압을 높인다)

# ./src/main/java/mods/eln/transparentnode/solarpanel/SolarPanelContainer.java
Solar_tracker_slot=태양 추적기 슬릇

# ./src/main/java/mods/eln/transparentnode/solarpanel/SolarPanelDescriptor.java
Can_be_geared_towards_the_sun.=태양을 바라볼 수 있습니다.
Max._power\:_%1$W=최대 전력: %1$W
Max._voltage\:_%1$V=최대 전압: %1$V
Produces_power_from_solar_radiation.=태양광으로부터 전력을 만듭니다.

# ./src/main/java/mods/eln/transparentnode/solarpanel/SolarPanelElement.java
Panel_angle=패널 각도
Producing_energy=생산중인 에너지
Sun_angle=태양 각도

# ./src/main/java/mods/eln/transparentnode/solarpanel/SolarPannelGuiDraw.java
It_is_night=지금은 밤입니다
Solar_panel_angle\:_%1$°=태양광 패널 각도: %1$°
Sun_angle\:_%1$°=태양 각도: %1$°

# ./src/main/java/mods/eln/transparentnode/teleporter/TeleporterElement.java
Destination=도착지
Distance=거리
Required_energy=필요한 에너지

# ./src/main/java/mods/eln/transparentnode/teleporter/TeleporterGui.java
Destination_transporter=도착지 이동기
Power_consumption\:=전력 소모:
Power_consumption\:_%1$W=전력 소모: %1$W
Required_energy\:_%1$J=필요 에너지: %1$J
Start=시작
Transporter_name=이동기 이름

# ./src/main/java/mods/eln/transparentnode/thermaldissipatoractive/ThermalDissipatorActiveDescriptor.java
Fan_cooling_power\:_%1$W=팬 냉각 전력: %1$W
Fan_power_consumption\:_%1$W=팬 전력 소비량: %1$W
Fan_voltage\:_%1$V=팬 전압: %1$V

# ./src/main/java/mods/eln/transparentnode/thermaldissipatoractive/ThermalDissipatorActiveElement.java

# ./src/main/java/mods/eln/transparentnode/transformer/TransformerContainer.java
Casing_slot=케이싱 슬롯

# ./src/main/java/mods/eln/transparentnode/transformer/TransformerDescriptor.java
The_voltage_ratio_is_proportional\nto_the_cable_stacks_count_ratio.=The voltage ratio is proportional\nto the cable stacks count ratio.
Transforms_an_input_voltage_to\nan_output_voltage.=Transforms an input voltage to\nan output voltage.

# ./src/main/java/mods/eln/transparentnode/transformer/TransformerElement.java
Core_factor=핵심 요소
Isolated=고립된
Ratio=비율

# ./src/main/java/mods/eln/transparentnode/turbine/TurbineDescriptor.java
Generates_electricity_using_heat.=열로 전기를 만듭니다.
Temperature_difference\:_%1$°C=온도 차이: %1$°C

# ./src/main/java/mods/eln/transparentnode/turbine/TurbineElement.java
Nominal=정상

# ./src/main/java/mods/eln/transparentnode/turret/TurretDescriptor.java
CAUTION\:_Cables_can_get_quite_hot!=경고: 케이블이 가열되었을 수 있습니다!
Laser_charge_power\:_%1$W...%2$kW=레이저 충전량: %1$W...%2$kW
Scans_for_entities_and_shoots_if_the\nentity_matches_the_configurable_filter_criteria.=Scans for entities and shoots if the\nentity matches the configurable filter criteria.
Standby_power\:_%1$W=대기 전력: %1$W

# ./src/main/java/mods/eln/transparentnode/turret/TurretElement.java
??=??
Charge_level=충전 래벨
Shoot_=쏘기
Shoot_everything=모든것 쏘기
Shoot_nothing=쏘지 않기
Target=대상
animals=동물
monsters=몬스터
players=플레이어

# ./src/main/java/mods/eln/transparentnode/turret/TurretGui.java
Attack\:=공격:
Do_not_attack\:=공격하지 않음:
Recharge_power\:=전원 재충전:

# ./src/main/java/mods/eln/transparentnode/waterturbine/WaterTurbineDescriptor.java
Generates_energy_using_water_stream.=물의 흐름으로 에너지를 만듭니다.
No_place_for_water_turbine!=워터 터빈을 놓을 공간이 없습니다!

# ./src/main/java/mods/eln/transparentnode/waterturbine/WaterTurbineElement.java

# ./src/main/java/mods/eln/transparentnode/windturbine/WindTurbineDescriptor.java
Front\:_%1$=전면: %1$
Generates_energy_from_wind.=바람으로부터 에너지를 만듭니다.
Left_Right\:_%1$=좌/우: %1$
Up_Down\:_%1$=상/하: %1$
Wind_area\:=풍량 구간:

# ./src/main/java/mods/eln/wiki/Data.java
Light=빛
Machine=기계
Ore=광물
Portable=휴대용
Resource=자원
Signal=신호
Thermal=열
Upgrade=업그래이드
Utilities=유틸리티
Wiring=배선

# ./src/main/java/mods/eln/wiki/Default.java
Previous=전

# ./src/main/java/mods/eln/wiki/ItemDefault.java
Can_be_used_to_craft\:=조합 하는 데 쓰일 수 있음:
Cannot_be_crafted!=조합할 수 없습니다!
Cost_%1$J=가격 %1$J
Created_by\:=생성됨:
Is_not_a_crafting_material!=이것은 조합 재료가 아닙니다!
Recipe\:=조합법:

# Appearing in multiple source files
%1$_is_not_in_range!=%1$ 이 범위에 없음!
(Increases_capacity)=(저장량 증가)
(Increases_inductance)=(유도계수를 증가시킴)
Actual\:_%1$°C=실제: %1$°C
Battery_level=배터리 래벨
Biggest=가장 큰
Booster_slot=부스터 슬릇
Can_create\:=만들 수 있음:
Capacity\:_%1$F=용량: %1$F
Channel=채널
Charge=충전 중
Charge_power=충전용 전력
Charge_power\:_%1$W=충전 세기: %1$W
Closed=닫힘
Connected=연결됨
Cooling_power\:_%1$W=냉각 세기: %1$W
Copper_cable_slot=구리선 슬릇
Current=현재
Dielectric_slot=절연체 슬릇
Discharge_power\:_%1$W=방전량: %1$W
Electrical_cable_slot=전기 케이블 슬릇
Energy=에너지
Entity_filter_slot=엔티티 필터 슬릇
External_control=외부 컨트롤
Ferromagnetic_core_slot=강자성체 핵 슬릇
Generated_power=발전됨 파워
Generates_heat_when_supplied_with_fuel.=연료가 공급되었을 시 열을 만듭니다.
Generating=발전중
Has_a_signal_output.=시그널 출력이 있습니다.
Inductance\:_%1$H=유도계수: %1$H
Input=입력
Input_voltage=입력 전압
Internal_control=내부 컨트롤
Internal_resistance\:_%1$\u2126=내부 저항: %1$\u2126
Is_off=꺼짐
Is_on=켜짐
Life=수명
Max._temperature\:_%1$°C=최고 온도: %1$°C
Measured_value\ncorresponding\nto_0%_output=Measured value\ncorresponding\nto 0% output
Measured_value\ncorresponding\nto_100%_output=Measured value\ncorresponding\nto 100% output
No=아니오
Nominal\:=정상:
Nominal_power\:_%1$W=평균적 전력: %1$W
Nominal_usage\:=일반적 쓰임새:
Nominal_voltage\:_%1$V=정상 전압: %1$V
None=없음
Not_connected=연결되지 않음
Not_enough_space_for_this_block=이 블럭에 필요한 공간이 부족합니다
OFF=꺼짐
ON=켜짐
Off=꺼짐
On=켜짐
Open=열림
Output_voltage=출력 전압
Portable_battery_slot=휴대용 배터리 슬릇
Position=위치
Power=전력
Power\:_%1$W=전력: %1$W
Power_consumption=전력 소모
Powered_by_Lamp_Supply=램프 공급기로 전원 공급
Powered_by_cable=케이블로 전원 공급
Produced_power=생산되는 전원
Range\:_%1$_blocks=범위: %1$ 블록
Redstone_slot=레드스톤 슬릇
Redstone_value=레드스톤 값
Regulator_slot=레귤래이터 슬릇
Reset=리셋
Resistance=저항
Resistance\:_%1$\u2126=Resistance: %1$\u2126
Smallest=가장 작은
Specify_the_channel=채널을 선택
Specify_the_supply_channel=공급 채널을 선택하세요
Stored_energy\:_%1$J_(%2$%)=축적된 에너지: %1$J (%2$%)
Temperature=온도
Temperature\:_%1$°C=온도: %1$°C
Temperature_gauge=온도 게이지
Thermal_isolator_slot=열 아이솔레이터 슬릇
Thermal_power=열 전원
Toggle=토글
Toggle_switch=토글 스위치
Toggles_the_output_each_time\nan_emitter's_value_rises.\nUseful_to_allow_multiple_buttons\nto_control_the_same_light.=Toggles the output each time\nan emitter's value rises.\nUseful to allow multiple buttons\nto control the same light.
Used_to_cool_down_turbines.=터빈 냉각용으로 쓰임.
Uses_the_biggest\nvalue_on_the_channel.=Uses the biggest\nvalue on the channel.
Uses_the_smallest\nvalue_on_the_channel.=Uses the smallest\nvalue on the channel.
Validate=검정
Voltage=전압
Voltage\:_%1$V=전압: %1$V
Voltage_drop=전압 손실
Voltages=전압
Yes=예
You_can't_place_this_block_at_this_side=당신은 이 블럭을 이 쪽으로 놓으실 수 없습니다.
_O\:_= O:
