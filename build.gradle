buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'de.undercouch:gradle-download-task:1.2'
    }
}

apply plugin: 'forge'
apply plugin: 'de.undercouch.download'
apply plugin: 'java'

apply from: 'gradle.properties'

group = GROUP
archivesBaseName = ARCHIVE_NAME
version = VERSION

targetCompatibility = '1.6'
sourceCompatibility = '1.6'

sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']
        resources.excludes = ['*']
    }
}

minecraft {
    version = "1.7.10-10.13.2.1291"
    runDir = "run"

    srgExtra "PK: org/apache/commons/math3 mods/eln/libs/org/apache/commons/math3"
    srgExtra "PK: com/serotonin mods/eln/libs/com/serotonin"
    srgExtra "PK: gnu/io mods/eln/libs/gnu/io"
}



configurations {
    external
    compile.extendsFrom external
}

dependencies {
    external files("libs/commons-math3-3.3.jar", "libs/modbus4J.jar", "libs/seroUtils.jar")
}

jar {
    manifest {
        attributes 'Built-By': 'Electrical-Age Team'
        attributes 'Build-Date': new Date().format("yyyy-MM-dd HH:mm:ss")
        attributes 'Built-JDK': System.getProperty('java.version')
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-URL': 'https://github.com/Electrical-Age'
        attributes 'Implementation-Vendor': 'Electrical-Age Team'
        attributes 'Implementation-Vendor-Id': 'net.electricalage.eln'
        attributes 'Implementation-Version': project.version
        attributes 'Project-Url': 'https://electrical-age.net/'
        attributes 'Source-Compatibility': project.sourceCompatibility
        attributes 'Target-Compatibility': project.targetCompatibility
    }

    // Copy libs jar files
    from { configurations.external.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude(['dan200/**', 'ic2/**', 'li/**', 'buildcraft/**'])

    // Add README and LICENSE to the release jar
    from(['README.md', 'LICENSE.md'])

    // Asset whitelist to copy the required asset files into the release jar.
    // Ignore files not used in Minecraft to reduce the release jar size.
    // Copy main files
    from('src/main/resources/assets/eln/') {
        include 'logo.png'
        include 'sounds.json'
        into 'assets/eln/'
    }

    // Copy language files
    from('src/main/resources/assets/eln/lang') {
        include '*.lang'
        into 'assets/eln/lang'
    }

    // Copy model
    from('src/main/resources/assets/eln/model') {
        exclude '_Common'
        exclude '_TEMPLATES'
        exclude 'export_*.png'
        include '**/*.mtl'
        include '**/*.obj'
        include '**/*.txt'
        include '**/*.png'
        into 'assets/eln/model'
    }

    // Copy sounds
    from('src/main/resources/assets/eln/sounds') {
        include '*.ogg'
        into 'assets/eln/sounds'
    }

    // Copy sprites
    from('src/main/resources/assets/eln/sprites') {
        include '**/*.png'
        include '**/*.xcf'
        into 'assets/eln/sprites'
    }

    // Copy sprites
    from('src/main/resources/assets/eln/textures') {
        include '**/*.png'
        into 'assets/eln/textures'
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
}

clean {
    // Clean generated/built files. Saves are NOT deleted.
    delete("${minecraft.runDir}/logs")
    delete("${minecraft.runDir}/crash-reports")
}

def getMinecratfDir() {
    String outDir = ""
    final String osName = System.getProperty("os.name").toLowerCase()
    if (osName.contains('windows'))
        outDir = System.getenv("APPDATA") + "/.minecraft"
    else if (osName.contains('os x'))
        outDir = System.getProperty("user.home") + "/Library/Application Support/minecraft"
    else if (osName.contains('linux'))
        outDir = System.getProperty("user.home") + "/.minecraft"
    return outDir
}

// Custom task to build and copy the mod Jar to the default local Minecraft folder
task buildAndCopyJar(dependsOn: 'build', type: Copy) {
    outputs.upToDateWhen { false } // Force to run this task
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // Overwrite the file if exists

    from("build/libs")
    into(getMinecratfDir() + "/mods")
    include("*.jar")
}

import de.undercouch.gradle.tasks.download.Download

// Download the tutorial map as a zip file to the local 'run/saves' folder
task downloadTutoMap(type: Download) {
    src(MAPURL)
    dest(new File(minecraft.runDir + "/saves", MAPURL.substring(MAPURL.lastIndexOf("/") + 1, MAPURL.length())))
    overwrite true
}

// Unzip the local tutorial map after downloading it. Overwrite the map content if already exist
task unzipTutoMap(dependsOn: downloadTutoMap, type: Copy) {
    outputs.upToDateWhen { false } // Force to run this task

    from zipTree(downloadTutoMap.dest)
    into(minecraft.runDir + "/saves")
}

// Update all existing language files.
task updateLanguageFiles(type: JavaExec, dependsOn: 'classes') {
    main = 'mods.eln.i18n.LanguageFileUpdater'
    classpath = sourceSets.main.runtimeClasspath
    args = ['./src', './src/main/resources/assets/eln/lang']
}
